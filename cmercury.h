#if !defined(AFX_CMERCURY_H__E2B781DA_A928_4E4D_B1A7_78F07DDA0EA1__INCLUDED_)
#define AFX_CMERCURY_H__E2B781DA_A928_4E4D_B1A7_78F07DDA0EA1__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CMercury wrapper class

class CMercury : public CWnd
{
protected:
	DECLARE_DYNCREATE(CMercury)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xed0257f0, 0x3434, 0x4934, { 0xb6, 0xa9, 0xd3, 0x7e, 0x14, 0xc5, 0x59, 0x86 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	UINT nID;
// Operations
public:
	void PrintCheck(IUnknown *pUnk,double dblCash);
	void Open();
	void Close(BOOL ForceAbort);
	void OpenReceipt(long Oper);
	void AddReceiptItem(LPCTSTR Desc, const CY& Price, BOOL ItemIsTare, long Department, long Code, long Adjustment, long Quantity, long QuantityPrec, long TaxIndex, LPCTSTR UnitName, long Flags);
	void CancelReceipt();
	void CloseReceipt(LPCTSTR Account, long PayType, const CY& PayCash, const CY& PayCashless, LPCTSTR PayInfo, long CopiesNum, long OperInfo);
	void OpenCustomDoc(BOOL UseForm, long Oper);
	void CancelCustomDoc();
	void CloseCustomDoc(long PayType, long Flags, long HCopiesNum, long VCopiesNum, long VOrigOffset, long HCopyOffset, long VCopyOffset, long FiscalCopy);
	void OpenFiscalDoc(long Oper);
	void CancelFiscalDoc(BOOL BufferOnly);
	void PrintFiscalDocBuffer();
	void CloseFiscalDoc();
	void CopyFiscalDoc();
	void AddSerialNumber(long Flags, long HOffset, long VOffset);
	void AddHeaderLine(long LineNum, long Flags, long HOffset, long VOffset);
	void AddDateTime(long Flags, long HOffset, long VOffset);
	void AddOperInfo(long OperInfo, long Flags, long HOffset, long VOffset);
	void AddDocNumber(long Flags, long HOffset, long VOffset);
	void AddReceiptNumber(long Flags, long HOffset, long VOffset);
	void AddAccount(LPCTSTR Account, long Flags, long HOffset, long VOffset);
	void AddTaxPayerNumber(long Flags, long HOffset, long VOffset);
	void AddItem(long ItemType, const CY& Price, BOOL ItemIsTare, long Department, long Code, long Adjustment, long Quantity, long QuantityPrec, long TaxIndex, LPCTSTR UnitName, long Flags, long HOffset, long VOffset, long RightOffset);
	void AddDocPercentAdj(long Value, long TaxIndex, long Flags, long HOffset, long VOffset, long RightOffset);
	void AddDocAmountAdj(const CY& Value, long TaxIndex, long Flags, long HOffset, long VOffset, long RightOffset);
	void AddTotal(long Flags, long HOffset, long VOffset, long RightOffset);
	void AddPay(long PayType, const CY& PayCash, const CY& PayCashless, LPCTSTR PayInfo, long Flags, long HOffset, long VOffset, long RightOffset);
	void AddChange(long Flags, long HOffset, long VOffset, long RightOffset);
	void AddTaxSum(long TaxIndex, long Flags, long HOffset, long VOffset, long RightOffset);
	void AddFiscalSign(long Flags, long HOffset, long VOffset);
	void AddBarcode(long Mask1, long Mask2, long Mask3, long Mask4, long Mask5, BOOL DoubleDensity, long Flags, long HOffset, long VOffset);
	void AddCustom(LPCTSTR Text, long Flags, long HOffset, long VOffset);
	void RepeatOperation();
	void OpenDay(long OperNum, LPCTSTR OperName, BOOL FullJournal, long AProtocol);
	long ZReport(long Flags);
	long FiscalRewrite(LPCTSTR InspPswd, LPCTSTR RegNum, LPCTSTR TaxPayerNum, LPCTSTR NewInspPswd);
	long FiscalReportByNum(LPCTSTR InspPswd, BOOL PrintFull, long AStartNum, long AEndNum);
	long FiscalReportByDate(LPCTSTR InspPswd, BOOL PrintFull, DATE AStartDate, DATE AEndDate);
	long FiscalReportAll(LPCTSTR InspPswd);
	void FeedAndCut(long LineCount, BOOL CutAfterFeed);
	void PrintNonFiscal(LPCTSTR Data, BOOL OpenDoc, BOOL CloseDoc);
	void ShowDisplay(LPCTSTR Data, BOOL OpenMode, BOOL CloseMode);
	void SetDisplayBaudRate(long BaudRate);
	void ExternalPulse(long Channel, long TimeOn, long TimeOff, long Count);
	void QueryDevExStatus();
	void QueryFirmwareInfo();
	void SetHeader(LPCTSTR Line1, LPCTSTR Line2, LPCTSTR Line3, LPCTSTR Line4);
	void SetTax(long Index, LPCTSTR TaxName, long TaxRate);
	long QueryTax(long Index);
	CY QueryCounter(long Index, BOOL NoRequest);
	void SynchronizeEcrDateTime();
	void QueryResourceInfo(BOOL PrintInfo);
	void QueryLastDocInfo();
	void SetParameters(long Protocol, long PrnTimeout);
	long GetEcrModel();
	long GetEcrVersion();
	long GetGeneration();
	long GetProtocol();
	long GetEcrStatus();
	long GetEcrStatusMask();
	long GetDevStatus();
	long GetDevStatusMask();
	long GetDocStatus();
	long GetCurrentOper();
	long GetPortNum();
	void SetPortNum(long nNewValue);
	long GetBaudRate();
	void SetBaudRate(long nNewValue);
	CString GetPassword();
	void SetPassword(LPCTSTR lpszNewValue);
	long GetInternalTimeout();
	void SetInternalTimeout(long nNewValue);
	long GetExternalTimeout();
	void SetExternalTimeout(long nNewValue);
	CString QueryHeaderLine(long LineNum);
	CString QuerySerialNumber();
	void SetSerialNumber(LPCTSTR Value);
	CString QueryTaxPayerNumber();
	CString QueryRegNumber();
	DATE QueryEcrDateTime();
	CString QueryDepartName(long DepartNum);
	void SetDepartName(long DepartNum, LPCTSTR Value);
	CString QueryTitle(long TitleNum);
	void SetTitle(long TitleNum, LPCTSTR Value);
	BOOL GetActive();
	void SetActive(BOOL bNewValue);
	long GetConnState();
	CY GetSaleSum();
	CY GetBuyingSum();
	CString GetSerialNumber();
	CString GetRegNumber();
	CString GetTaxPayerNumber();
	CString GetHeaderLine1();
	CString GetHeaderLine2();
	CString GetHeaderLine3();
	CString GetHeaderLine4();
	DATE GetStartDate();
	DATE GetEndDate();
	long GetStartNumber();
	long GetEndNumber();
	DATE GetReportDate();
	CString GetModelName();
	CString GetManufacturer();
	CString GetFirmwareVersion();
	CString GetTaxName();
	DATE GetTaxDate();
	long GetCounterCount();
	long GetRewritesRemain();
	long GetDaysRemain();
	long GetLastFiscalReport();
	long GetLastDayClosing();
	DATE GetDayDate();
	long GetLastDocOper();
	long GetLastDocNumber();
	long GetLastRecNumber();
	long GetLastDocType();
	CY GetLastDocSum();
	DATE GetLastDocDate();
	BOOL GetRetryOperation();
	void SetRetryOperation(BOOL bNewValue);
	long GetErrCode();
	long GetErrCodeEx();
	CString GetErrMessage();
	long CheckEcrStatus(long Flag);
	long CheckDevStatus(long Flag);
	long GetEcrHour();
	long GetEcrMin();
	long GetReportHour();
	long GetReportMin();
	long GetDayHour();
	long GetDayMin();
	long GetLastDocHour();
	long GetLastDocMin();
	void AddGraphicHeader(long Flags, long HOffset, long VOffset);
	void SetProtocol(long Protocol);
	void SetPrinterTimeout(long Timeout);
	void SetDisplayTimeout(long Timeout);
	void SetPrinterContrast(long Contrast);
	void SetLeading(long Leading);
	void SetCutterDisabled(BOOL Disabled);
	void SetNarrowPaper(BOOL Narrow);
	long QueryPrinterTimeout();
	long QueryDisplayTimeout();
	long QueryPrinterContrast();
	long QueryLeading();
	void EnableGraphicHeader(long Width, long Height, LPCTSTR Data);
	void DisableGraphicHeader();
	void AddLicence(long LicType, LPCTSTR Licence);
	long XReport(long Flags);
	long XReportByDep(long DepartNum, long Flags);
	long XReportByOper(long OperNum, long Flags);
	BOOL QueryHeaderAlignment();
	long QueryOperNumber();
	CString QueryOperName(long OperNum);
	void SetHeaderAlignment(BOOL Aligned);
	void TestConnection();
	long GetVersionNumber();
	long GetBuildNumber();
	CString GetVersion();
	void SetVersion(LPCTSTR lpszNewValue);
	long GetBorderSize();
	void SetBorderSize(long nNewValue);
	BOOL GetShowState();
	void SetShowState(BOOL bNewValue);
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	void AboutBox();
	BOOL QueryAutocut();
	void SetAutocut(BOOL Autocut);
	BOOL QueryEconomicMode();
	void SetEconomicMode(BOOL EconomicMode);
	long GetEcrSubVersion();
	void EKLZActivate();
	void EKLZActivationReport();
	void EKLZDayReport(long DayNumber);
	void EKLZReportByNum(BOOL IsFull, long AStartNum, long AEndNum);
	void EKLZReportByDate(BOOL IsFull, DATE AStartDate, DATE AEndDate);
	void EKLZDocByNum(long Number);
	void EKLZControlByNum(long DayNumber);
	void EKLZCloseArchive();
	void EKLZQueryStatus();
	BOOL QueryPaperJournal();
	void SetPaperJournal(BOOL PaperJournal);
	BOOL GetEKLZSupported();
	BOOL GetEKLZActivated();
	long GetEKLZOper();
	BOOL GetEKLZArchiving();
	BOOL GetEKLZReporting();
	BOOL GetEKLZDayOpened();
	BOOL GetEKLZFatalError();
	BOOL GetEKLZAttention();
	BOOL QueryFullJournal();
	void SetFullJournal(BOOL FullJournal);
	void AddEKLZData(long Flags, long HOffset, long VOffset);
	CY GetLastBuyingSum();
	void AddRegNumber(long Flags, long HOffset, long VOffset);
	void WriteGraphic(long Number, long Width, long Height, LPCTSTR Data);
	void PrintGraphic(long Width, long Height, LPCTSTR Data);
	BOOL QueryParameterBool(long ParamCode);
	long QueryParameterInt(long ParamCode);
	void SetParameterBool(long ParamCode, BOOL ParamValue);
	void SetParameterInt(long ParamCode, long ParamValue);
	void PrintHeader();
	void SetOperPassword(long OperNum, LPCTSTR OperName, LPCTSTR OperPassword);
	long PrintEKL(long Flags);
	long QueryEKLState();
	void ReprintDocument();
	BOOL CreateFromStatic(UINT nId,CWnd* pParent);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_CMERCURY_H__E2B781DA_A928_4E4D_B1A7_78F07DDA0EA1__INCLUDED_)
