// Created by Microsoft (R) C/C++ Compiler Version 12.00.9782.0 (b4dc6be2).
//
// MSDATSRC.tli
//
// Wrapper implementations for Win32 type library C:\VisualCStudy\UserThreads\DLL\MSDATSRC.TLB
// compiler-generated file created 09/02/17 at 10:01:09 - DO NOT EDIT!

#pragma once

//
// interface DataSourceListener wrapper method implementations
//

inline HRESULT DataSourceListener::dataMemberChanged ( DataMember bstrDM ) {
    HRESULT _hr = raw_dataMemberChanged(bstrDM);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DataSourceListener::dataMemberAdded ( DataMember bstrDM ) {
    HRESULT _hr = raw_dataMemberAdded(bstrDM);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DataSourceListener::dataMemberRemoved ( DataMember bstrDM ) {
    HRESULT _hr = raw_dataMemberRemoved(bstrDM);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DataSource wrapper method implementations
//

inline IUnknownPtr DataSource::getDataMember ( DataMember bstrDM, GUID * riid ) {
    IUnknown * _result;
    HRESULT _hr = raw_getDataMember(bstrDM, riid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline DataMember DataSource::getDataMemberName ( long lIndex ) {
    DataMember _result;
    HRESULT _hr = raw_getDataMemberName(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long DataSource::getDataMemberCount ( ) {
    long _result;
    HRESULT _hr = raw_getDataMemberCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT DataSource::addDataSourceListener ( struct DataSourceListener * pDSL ) {
    HRESULT _hr = raw_addDataSourceListener(pDSL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT DataSource::removeDataSourceListener ( struct DataSourceListener * pDSL ) {
    HRESULT _hr = raw_removeDataSourceListener(pDSL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
