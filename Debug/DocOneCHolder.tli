// Created by Microsoft (R) C/C++ Compiler Version 10.00.30319.01 (3be66996).
//
// c:\visualcstudy1\userthreads\debug\doconecholder.tli
//
// Wrapper implementations for Win32 type library C:\VisualCStudy1\DocOneCHolder\ReleaseUMinSize\DocOneCHolder.dll
// compiler-generated file created 01/02/15 at 12:38:15 - DO NOT EDIT!

#pragma once

//
// interface IField wrapper method implementations
//

inline _variant_t IField::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IField::PutValue ( const _variant_t & pVal ) {
    HRESULT _hr = put_Value(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFields wrapper method implementations
//

inline IFieldPtr IFields::Item ( _bstr_t index ) {
    struct IField * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldPtr(_result, false);
}

inline HRESULT IFields::Add ( struct IField * pNewItem, _bstr_t bstrKey ) {
    HRESULT _hr = raw_Add(pNewItem, bstrKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFields::Remove ( const _variant_t & index ) {
    HRESULT _hr = raw_Remove(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ITable wrapper method implementations
//

inline IFieldsPtr ITable::GetFieldsX ( ) {
    struct IFields * _result = 0;
    HRESULT _hr = get_FieldsX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldsPtr(_result, false);
}

inline long ITable::LoadRows ( ) {
    long _result = 0;
    HRESULT _hr = raw_LoadRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ITable::GetRow ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetRow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ITable::AddNewLine ( ) {
    HRESULT _hr = raw_AddNewLine();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ITable::AddField ( _bstr_t bstrFieldName ) {
    HRESULT _hr = raw_AddField(bstrFieldName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDocOneC wrapper method implementations
//

inline _bstr_t IDocOneC::GetKind ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDocOneC::PutKind ( _bstr_t pVal ) {
    HRESULT _hr = put_Kind(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DATE IDocOneC::GetDateDoc ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DateDoc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDocOneC::PutDateDoc ( DATE pVal ) {
    HRESULT _hr = put_DateDoc(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IDocOneC::GetTable ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline ITablePtr IDocOneC::CreateTable ( ) {
    struct ITable * _result = 0;
    HRESULT _hr = raw_CreateTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITablePtr(_result, false);
}

inline _bstr_t IDocOneC::SerializeToBSTR ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SerializeToBSTR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IDocOneC::ReestablishObjFromBSTR ( _bstr_t bstrStream, IDispatch * * pVal ) {
    HRESULT _hr = raw_ReestablishObjFromBSTR(bstrStream, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IDocOneC::GetHead ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Head(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IAttributes wrapper method implementations
//

inline _variant_t IAttributes::Item ( VARIANT * index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT IAttributes::Add ( VARIANT * Item, VARIANT * Key ) {
    HRESULT _hr = raw_Add(Item, Key);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IAttributes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IAttributes::Remove ( VARIANT * index ) {
    HRESULT _hr = raw_Remove(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IAttributes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IRows wrapper method implementations
//

inline _variant_t IRows::Item ( const _variant_t & index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long IRows::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IRows::Add ( IDispatch * pnewRow ) {
    HRESULT _hr = raw_Add(pnewRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRows::Remove ( long index ) {
    HRESULT _hr = raw_Remove(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IRows::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IHead wrapper method implementations
//

inline IDispatchPtr IHead::GetAttributes ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IHead::SetAttribute ( _bstr_t Key, const _variant_t & attr ) {
    HRESULT _hr = raw_SetAttribute(Key, attr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IHead::GetAttribute ( _bstr_t Key ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetAttribute(Key, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}
